let path,execSync,readFileSync,writeFileSync;_3da‍.x([["checkPackageJson",()=>checkPackageJson],["addScriptToPackageJson",()=>addScriptToPackageJson]]);_3da‍.w("path",[["default",["path"],function(v){path=v}]]);_3da‍.w("child_process",[["execSync",["execSync"],function(v){execSync=v}]]);_3da‍.w("jsonfile",[["readFileSync",["readFileSync"],function(v){readFileSync=v}],["writeFileSync",["writeFileSync"],function(v){writeFileSync=v}]]);



const command = 'chromatic';
const script = 'chromatic';

       function checkPackageJson({ appDir = process.cwd() } = {}) {
  const packageJson = readFileSync(path.resolve(appDir, './package.json'));

  return Object.entries(packageJson.scripts || {}).find(
    ([key, value]) => value.match(command) || key === script
  );
}

       function addScriptToPackageJson(scriptName, scriptCommand, { appDir = process.cwd() } = {}) {
  const filename = path.resolve(appDir, './package.json');
  const packageJson = readFileSync(filename);

  if (packageJson[scriptName]) {
    throw new Error(`Script named '${scriptName}' already exists in package.json`);
  }

  if (!packageJson.scripts) {
    packageJson.scripts = {};
  }
  packageJson.scripts[scriptName] = scriptCommand;

  if (!packageJson.dependencies) {
    packageJson.dependencies = {};
  }

  writeFileSync(filename, packageJson, { spaces: 2 });
}
